4η εργασία Εισαγωγή στον Προγραμματισμό

# NOTE
Η εργασία έγινε ομαδικά απο τους
sdi2200014 Ζήσιμος Βακράς
sdi2200122 Ιωάννης Ξηρός
ισότιμα, και οι δυό μας έχουμε πλήρη γνώση της υλοποίησης.
(Καθε γραμμη εχει γραφτει συλλογικά)
Το πρόγραμμα γινεται compile με `make` και βρισκεται στο '/target/crossw'
Στην εργασια αυτη μας βοηθησε πολυ το paper του stanford πανω στα csp crosswords
και το paper του prosser πανω στις τεχνικες labeling και unlabeling των variables σε csp
1. https://web.stanford.edu/~jduchi/projects/crossword_writeup.pdf
2. P. Prosser. Hybrid Algorithms for the Constraint Satisfaction Problem.
Computational Intelligence, Volume 9, Number 3. 1993.
Επισης μας βοηθησε πολυ και ο στεφ (το rubber ducky μας) και τον ευχαριστουμε πολυ.

# Υλοποίηση
## Αναπαράσταση του σταυρόλεξου

Το σταυρόλεξο μας ειναι ενας δισδιάστατος πινακας char (char**) στον οποιο
τα κελια που θα μπουν γραμματα αρχιοκοποιουνται σε '\0' και τα μαυρα κελια
σε '\r'. Ο λόγος που εχουμε βαλει αυτά τα chars ειναι γιατι το πρόγραμμα 
υποστηρίζει χαρακτήρες ολου του ascii table και αυτοι οι δυο δεν θα υπαρχουν 
σε καποιο γραμμα λεξης λεξικού.

## Λεξικο

Αρχικα δεσμευουμε χωρο για να χωρεσει ολο το λεξικο στη μνημη και στη συνεχεια
ταξινομουμε τις λεξεις κατα μηκος σε υπολεξικα. Οσες λεξεις δεν θα χρειαστουν
στη λυση δεν ταξινομουνται πουθενα και απλα γινονται free στο τελος του
προγραμματος. Στη συνεχεια ταξινομουμε τα υπολεξικα βασει τη συχνοτητα
εμφανισης των γραμματων (για τα μηκη λεξεων που μας ενδιαφερουν).

## Χαρτογραφιση του λεξικου

Για τη γρηγορη αναζητηση λεξεων στο λεξικο εχουμε δημιουργησει packed bit 
arrays ή αλλιως bitmaps στα οποια το καθε bit αναπαριστα μια λεξη (index) 
σε ενα υπολεξικο. τα bitmaps αυτα εχουν type long long το οποιο μας δινει
την δυνατοτητα σε ενα 64bit συστημα να κανουμε γρηγορες πραξεις bitwise-and(&).

## Χαρτογραφιση του σταυρόλεξου

Για να χαρτογραφισουμε τις λεξεις πανω στο σταυρολεξο χρησιμοποιουμε structs
τα οποια κρατανε οσες πληροφοριες μας ειναι χρησιμες για το προγραμμα (για παραπανω
πληροφοριες δειτε την υλοποιηση). Σημαντικο ειναι οτι κραταμε και τα intersections
καθε λεξης σε ενα array για να μας βοηθησουν στο fc-cbj που θα αναφερουμε αργοτερα

## Λυση του σταυρολεξου

Ο αλγοριθμος που χρησιμοποιουμε ειναι μια μιξη των τεχνικων:
- cbj (conflict-directed backjumping) 
- fc (forward checking)
- dvo (dynamic variable ordering) (πιο συγκεκριμενα mrv)

Ακολουθουμε την εξεις λογικη:

1. Βαζουμε παντα να συμπληρωθει το variable (λεξη στο σταυρολεξο) η οποια 
εχει της λιγοτερες επιλογες (mrv, domain size). Αυτο γινεται με την συναρτηση
sum_bit η οποια υπολογιζει ποσοι ασοι υπαρχουν σε ενα bitmap το οποιο ειναι ισοδυναμο
με το πληθος των λεξεων που μπορει να μπουν σε αυτη τη θεση.

2. Το labeling (fc-cbj) (αναθεση value σε variable) γινεται με τον παρακατω αλγοριθμο:

Αρχικα τσεκαρουμε 